import { BrowserProvider } from "ethers";

// ‚úÖ K·∫øt n·ªëi v√≠, ch·ªâ y√™u c·∫ßu n·∫øu ch∆∞a c√≥ t√†i kho·∫£n k·∫øt n·ªëi
export async function connectWallet() {
  if (!window.ethereum) {
    alert("Please install MetaMask or OKX Wallet!");
    return null;
  }

  try {
    // Ki·ªÉm tra n·∫øu ƒë√£ t·ª´ng k·∫øt n·ªëi, kh√¥ng g·ªçi eth_requestAccounts n·ªØa
    const accounts = await window.ethereum.request({ method: "eth_accounts" });
    if (accounts.length === 0) {
      // Ch·ªâ g·ªçi y√™u c·∫ßu n·∫øu ch∆∞a c√≥ k·∫øt n·ªëi
      await window.ethereum.request({ method: "eth_requestAccounts" });
    }

    const provider = new BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();
    const network = await provider.getNetwork();

    return {
      provider,
      signer,
      address: await signer.getAddress(),
      chainId: Number(network.chainId),
    };
  } catch (error) {
    console.error("connectWallet error:", error);
    alert("‚ùå Wallet connection failed. Please unlock your wallet and try again.");
    return null;
  }
}

// ‚úÖ L·∫•y l·∫°i v√≠ ƒë√£ k·∫øt n·ªëi (kh√¥ng hi·ªán popup)
export async function getExistingWallet() {
  if (!window.ethereum) return null;

  const accounts = await window.ethereum.request({ method: "eth_accounts" });
  if (accounts.length === 0) return null;

  const provider = new BrowserProvider(window.ethereum);
  const signer = await provider.getSigner();
  const network = await provider.getNetwork();

  return {
    provider,
    signer,
    address: await signer.getAddress(),
    chainId: Number(network.chainId),
  };
}

// ‚úÖ Chuy·ªÉn network n·∫øu ch∆∞a ƒë√∫ng (v√≠ d·ª• t·ª´ Ethereum sang Monad testnet)
export async function switchNetwork(chainInfo) {
  try {
    await window.ethereum.request({
      method: "wallet_addEthereumChain",
      params: [{
        chainId: "0x" + chainInfo.chainId.toString(16),
        chainName: chainInfo.chainName,
        nativeCurrency: chainInfo.nativeCurrency,
        rpcUrls: chainInfo.rpcUrls,
        blockExplorerUrls: chainInfo.blockExplorerUrls,
      }],
    });
  } catch (error) {
    console.error("switchNetwork error:", error);
    alert("Failed to switch network!");
  }
}

// ‚ùå Kh√¥ng c·∫ßn ng·∫Øt v√≠ th·∫≠t, ch·ªâ xo√° local info
export function disconnectWallet() {
  console.log("üîå Disconnected frontend only");
}
